variables:
  majorVersion: '4.4.1'
  minorVersion: $[counter('minorVersion', 1)]
  ffmpegVersion: '$(majorVersion).$(minorVersion)'

trigger:
  branches:
    include:
    - master

pr:
  branches:
    include:
    - master

stages:
  - stage: Setup
    displayName: Setup
    jobs:
      - job:
        displayName: Build Variables
        pool:
          vmImage: 'ubuntu-20.04'
        steps:
          # Set the build name properly.  The 'name' property won't recursively expand so hack here:
          - bash: echo "##vso[build.updatebuildnumber]$FFMPEGVERSION"
            displayName: Set Build Name

  - stage: ffmpeg
    displayName: Build FFmpeg
    jobs:
      - job: build
        strategy:
          matrix:
            linux-x64:
              folder: 'linux-x64'
              poolName: 'Azure Pipelines'
              imageName: 'ubuntu-20.04'
            linux-arm:
              folder: 'linux-arm'
              poolName: 'Azure Pipelines'
              imageName: 'ubuntu-20.04'
            linux-arm64:
              folder: 'linux-arm64'
              poolName: 'Azure Pipelines'
              imageName: 'ubuntu-20.04'
            win-x64:
              folder: 'win-x64'
              poolName: 'Azure Pipelines'
              imageName: 'ubuntu-20.04'
            win-x86:
              folder: 'win-x86'
              poolName: 'Azure Pipelines'
              imageName: 'ubuntu-20.04'
            osx-x64:
              folder: 'osx-x64'
              poolName: 'Azure Pipelines'
              imageName: 'macOS-11'
            osx-arm64:
              folder: 'osx-arm64'
              poolName: 'Azure Pipelines'
              imageName: 'macOS-11'
            freebsd-x64:
              folder: 'freebsd-x64'
              poolName: 'FreeBSD'
              imageName:
        pool:
          name: $(poolName)
          vmImage: $(imageName)
        steps:
          - checkout: self
            submodules: true
            fetchDepth: 1
          - bash: |
              ${FOLDER}/build.sh
            displayName: Build
          - publish: $(folder)/output
            artifact: ffmpeg-$(folder)
            displayName: Publish FFmpeg

  - stage: Package
    jobs:
      - job: Nuget
        pool:
          vmImage: 'ubuntu-20.04'
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: ffmpeg-linux-x64
              targetPath: linux-x64/output
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: ffmpeg-linux-arm64
              targetPath: linux-arm64/output
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: ffmpeg-linux-arm
              targetPath: linux-arm/output
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: ffmpeg-win-x64
              targetPath: win-x64/output
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: ffmpeg-win-x86
              targetPath: win-x86/output
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: ffmpeg-freebsd-x64
              targetPath: freebsd-x64/output
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: ffmpeg-osx-arm64
              targetPath: osx-arm64/output
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: ffmpeg-osx-x64
              targetPath: osx-x64/output
          - bash: |
              sed -i'' -e "s/<version>[0-9.*]\+<\/version>/<version>${FFMPEGVERSION}<\/version>/g" Servarr.FFprobe.nuspec
          - task: DotNetCoreCLI@2
            inputs:
              command: 'pack'
              projects: 'Servarr.FFprobe.csproj'
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: nuget
          - task: DotNetCoreCLI@2
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: '7ab38f4e-5a57-4d70-84f4-94dd9bc5d6df/783c2dce-dbc3-4218-8816-4a5e12af4d84'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
